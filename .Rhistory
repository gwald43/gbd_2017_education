getwd()
list.files(getwd())
Sys.time()
grep(Sys.time())
grep(Sys.time(), " ")
grep(" ",Sys.time())
grep(([^\s]+),Sys.time())
help(grep)
grep("([^\s]+)",Sys.time())
grep("([^\\s]+)",Sys.time())
grep("([^\\s]+)",Sys.time(), value = T)
version <- c(1,2,3) %>% max
library(data.table)
library(dplyr)
version <- c(1,2,3) %>% max
version <- c(1,2,3) %>% max %>% .+1
version <- c(1,2,3) %>% max %>% +1
version
regmatches(Sys.time(), "("<=\\s)
regmatches(Sys.time(), "(<=\\s)")
regmatches(Sys.time(), "(<=\\s)", PERL = T)
help(regmatches)
grep(Sys.time(), "(<=\\s)", PERL = T)
grep(Sys.time(), "(<=\\s)", perl = T)
grep(Sys.time(), "(?<=\\s)", perl = T)
grep(Sys.time(), "*(?<=\\s)", perl = T)
grep("*(?<=\\s)", Sys.time(), perl = T)
grep("(?<=\\s)", Sys.time(), perl = T)
grep("(?<=\\s)", Sys.time(), perl = T, value = T)
grep("*(?<=\\s)", Sys.time(), perl = T, value = T)
grep("(?=\\s)", Sys.time(), perl = T, value = T)
strsplit(Sys.time(), " ")
strsplit(Sys.time(), "\\s")
strsplit(Sys.time(), "\\s")
strsplit(Sys.time(), "\\s")
strsplit(Sys.time(), "\\s")
strsplit(Sys.time(), "\\s")
strsplit(Sys.time(), "\s")
strsplit(Sys.time(), "[[:space:]]")
strsplit(Sys.time(), " ")
Sys.time()
strsplit(" ", "cat dog")
strsplit("cat dog", " ")
Sys.time()
strsplit("2017-11-14 11:54:49 PST", " ")
date    <- Sys.time() %>% strsplit(., " ")
strsplit(as.character(Sys.time()), " ")
strsplit(as.character(Sys.time()), " ")[[1]][1]
date    <- Sys.time() %>% as.character %>% strsplit(., " ")
date
date    <- Sys.time() %>% as.character %>% strsplit(., " ") %>% [[1]][1]
date    <- Sys.time() %>% as.character %>% strsplit(., " ") %>% .[[1]][1]
date
[[1]]
date[[1]]
date[[1]][1]
% .[[1]][1]
date    <- Sys.time() %>% as.character %>% regmatches(., regexpr("(?<=\\s)", .))
date    <- Sys.time() %>% as.character %>% regmatches(., regexpr("(?<=\\s)", ., perl = T))
date
date    <- Sys.time() %>% as.character
date
regmatches(date, regexpr("(?<=\\s)", date, perl = T))
regmatches(date, regexpr("*(?<=\\s)", date, perl = T))
regmatches(date, regexpr("(?<=\\s)*", date, perl = T))
regmatches(date, regexpr("(?=\\s)", date, perl = T))
regmatches(date, regexpr("^\\s*", date, perl = T))
regmatches(date, regexpr("^(.+?)", date, perl = T))
regmatches(date, regexpr("^.[[:space:]]", date, perl = T))
regmatches(date, regexpr("^.[[:space:]]", date))
help(sub)
sub(" .*$", " ", date)
sub(" .*$", "", date)
gsub(" .*$", "", date)
date    <- Sys.time() %>% as.character %>% sub(" .*$", "", .)
date
date    <- Sys.time() %>% as.character %>% sub(" .*$", "", .) %>% gsub("-", "_", .)
date
main_dir    <- "/snfs1/WORK/01_covariates/02_inputs/education/"
help(dir.create)
rm(list=ls())
library(data.table)
library(plyr)
library(ggplot2)
#source(functions.R)
###########################################
# Analytical steps for GBD 2017 education
###########################################
#
# Code is structured as follows:
#   1. Options and desired outputs
#   2. Directories and datasets
#   3. Version control options
#   4. Analytical steps
#   5. Database formatting
#   6. Graphing tools
#
###########################################
#############
# 1. Options
#############
team        <- "GBD"              #Can be either "GBD", "Forecasting", or "Risk Factors"
debug       <- T                  #If True, then code will only be run for a single location, year, age, sex
new_version <- T                  #Create a new version? If not specified, version below must be specified.
steps       <- c(1, 2, 3, etc)    #Which analytical steps to run. If blank, all steps are run.
version <- NA
#########################################
# 2. Version control & directory options
########################################
main_dir    <- "/snfs1/WORK/01_covariates/02_inputs/education/"
version_dir <- paste0(main_dir, "/version_history/", team, "/")
# If it's a new version of results, create the new version. Otherwise, overwrite a set of pre-existing results. User must manually input the version
if (new_version == T){
version <- list.files(version_dir) %>% max %>% +1
}
sub_dir     <- paste0(main_dir, team, "/", version)
input_dir   <- paste0(sub_dir, "/inputs/")
output_dir  <- paste0(sub_dir, "/outputs/")
figure_dir  <- paste0(sub_dir, "/figures/")
date    <- Sys.time() %>% as.character %>% sub(" .*$", "", .) %>% gsub("-", "_", .)
#If directories don't already exist, make them
for (filepath in list(input_dir, output_dir, figure_dir)){
dir.create(filepath, recursive = T, showWarnings = F)
}
version
filepath
rm(list=ls())
library(data.table)
library(plyr)
library(ggplot2)
#source(functions.R)
###########################################
# Analytical steps for GBD 2017 education
###########################################
#
# Code is structured as follows:
#   1. Options and desired outputs
#   2. Directories and datasets
#   3. Version control options
#   4. Analytical steps
#   5. Database formatting
#   6. Graphing tools
#
###########################################
#############
# 1. Options
#############
team        <- "GBD"              #Can be either "GBD", "Forecasting", or "Risk Factors"
debug       <- T                  #If True, then code will only be run for a single location, year, age, sex
new_version <- F                  #Create a new version? If not specified, version below must be specified.
steps       <- c(1, 2, 3, etc)    #Which analytical steps to run. If blank, all steps are run.
version <- 1
#########################################
# 2. Version control & directory options
########################################
main_dir    <- "J:/WORK/01_covariates/02_inputs/education/update_2018/"
version_dir <- paste0(main_dir, "/version_history/", team, "/")
# If it's a new version of results, create the new version. Otherwise, overwrite a set of pre-existing results. User must manually input the version
if (new_version == T){
version <- list.files(version_dir) %>% max %>% +1
}
sub_dir     <- paste0(main_dir, team, "/", version)
input_dir   <- paste0(sub_dir, "/inputs/")
output_dir  <- paste0(sub_dir, "/outputs/")
figure_dir  <- paste0(sub_dir, "/figures/")
date    <- Sys.time() %>% as.character %>% sub(" .*$", "", .) %>% gsub("-", "_", .)
#If directories don't already exist, make them
for (filepath in list(input_dir, output_dir, figure_dir)){
dir.create(filepath, recursive = T, showWarnings = F)
}
rm(list=ls())
library(data.table)
library(plyr)
library(ggplot2)
#source(functions.R)
###########################################
# Analytical steps for GBD 2017 education
###########################################
#
# Code is structured as follows:
#   1. Options and desired outputs
#   2. Directories and datasets
#   3. Version control options
#   4. Analytical steps
#   5. Database formatting
#   6. Graphing tools
#
###########################################
#############
# 1. Options
#############
team        <- "GBD"              #Can be either "GBD", "Forecasting", or "Risk Factors"
debug       <- T                  #If True, then code will only be run for a single location, year, age, sex
new_version <- F                  #Create a new version? If not specified, version below must be specified.
steps       <- c(1, 2, 3, etc)    #Which analytical steps to run. If blank, all steps are run.
version <- 1
#########################################
# 2. Version control & directory options
########################################
main_dir    <- "J:/WORK/01_covariates/02_inputs/education/update_2018/"
version_dir <- paste0(main_dir, "/version_history/", team, "/")
# If it's a new version of results, create the new version. Otherwise, overwrite a set of pre-existing results. User must manually input the version
if (new_version == T){
version <- list.files(version_dir) %>% max %>% +1
}
sub_dir     <- paste0(main_dir, team, "/", version)
input_dir   <- paste0(sub_dir, "/inputs/")
output_dir  <- paste0(sub_dir, "/outputs/")
figure_dir  <- paste0(sub_dir, "/figures/")
date    <- Sys.time() %>% as.character %>% sub(" .*$", "", .) %>% gsub("-", "_", .)
#If directories don't already exist, make them
for (filepath in list(version_dir, input_dir, output_dir, figure_dir)){
dir.create(filepath, recursive = T, showWarnings = F)
}
rm(list=ls())
library(data.table)
library(plyr)
library(ggplot2)
#source(functions.R)
###########################################
# Analytical steps for GBD 2017 education
###########################################
#
# Code is structured as follows:
#   1. Options and desired outputs
#   2. Directories and datasets
#   3. Version control options
#   4. Analytical steps
#   5. Database formatting
#   6. Graphing tools
#
###########################################
#############
# 1. Options
#############
team          <- "GBD"              #Can be either "GBD", "Forecasting", or "Risk Factors"
debug         <- T                  #If True, then code will only be run for a single location, year, age, sex
new_version   <- F                  #Create a new version? If not specified, version below must be specified.
steps         <- c(1, 2, 3, etc)    #Which analytical steps to run. If blank, all steps are run.
version       <- 1                  #Must specify if new_version == F
#Initial notes detailing version's purpose
version_notes <- "Test run for new education code"
#########################################
# 2. Version control & directory options
########################################
main_dir    <- "J:/WORK/01_covariates/02_inputs/education/update_2018/"
version_dir <- paste0(main_dir, "/version_history/", team, "/")
# If it's a new version of results, create the new version. Otherwise, overwrite a set of pre-existing results. User must manually input the version
if (new_version == T){
version <- list.files(version_dir) %>% max %>% +1
}
sub_dir     <- paste0(main_dir, team, "/", version)
input_dir   <- paste0(sub_dir, "/inputs/")
output_dir  <- paste0(sub_dir, "/outputs/")
figure_dir  <- paste0(sub_dir, "/figures/")
date    <- Sys.time() %>% as.character %>% sub(" .*$", "", .) %>% gsub("-", "_", .)
#If directories don't already exist, make them
for (filepath in list(version_dir, input_dir, output_dir, figure_dir)){
dir.create(filepath, recursive = T, showWarnings = F)
}
#Write initial log, with date stamp and version notes
log <- paste0("Version: ", team, ", v.", version, "\n\n", "Date: ", date, "\n\n", "Description: ", version_notes)
log
cat(log)
log     <- paste0("Version: ", team, " v.", version, "\n\n", "Date: ", date, "\n\n", "Description: ", version_notes)
log_txt <- file(paste0(version_dir), "v.", version, ".txt")
writeLines(log, log_txt)
close(log_txt)
log_txt <- file(paste0(version_dir, "v.", version, ".txt"))
writeLines(log, log_txt)
close(log_txt)
log_txt <- file(paste0(version_dir, "v.", version, "_", date, ".txt"))
writeLines(log, log_txt)
close(log_txt)
help(write)
log      <- paste0("Version: ", team, " v.", version, "\n\n", "Date: ", date, "\n\n", "Description: ", version_notes)
log_file <- file(paste0(version_dir, "v.", version, "_", date, ".txt"))
write(log, file = log_file)
help(writeLines)
cat(log, file = log_file)
log_file <- file(paste0(version_dir, "v.", version, "_", date, ".txt"))
cat(log, file = log_file)
rm(list=ls())
library(data.table)
library(plyr)
library(ggplot2)
#source(functions.R)
###########################################
# Analytical steps for GBD 2017 education
###########################################
#
# Code is structured as follows:
#   1. General options
#   2. Version control and directory options
#   3. Analytical steps
#   4. Database formatting
#   5. Graphing tools
#
###########################################
#############
# 1. Options
#############
team          <- "GBD"              #Can be either "GBD", "Forecasting", or "Risk Factors"
debug         <- T                  #If True, then code will only be run for a single location, year, age, sex
new_version   <- F                  #Create a new version? If not specified, version below must be specified.
steps         <- c(1, 2, 3, etc)    #Which analytical steps to run. If blank, all steps are run.
if (new_version == F){
version     <- 1
}
#Initial notes detailing version's purpose
version_notes <- "Test run for new education code"
#########################################
# 2. Version control & directory options
#########################################
main_dir    <- "J:/WORK/01_covariates/02_inputs/education/update_2018/education_results/"
version_dir <- paste0(main_dir, "/version_history/", team, "/")
# If it's a new version of results, create the new version. Otherwise, overwrite a set of pre-existing results. User must manually input the version
if (new_version == T){
version <- list.files(version_dir) %>% max %>% +1
}
sub_dir     <- paste0(main_dir, team, "/", version)
input_dir   <- paste0(sub_dir, "/inputs/")
output_dir  <- paste0(sub_dir, "/outputs/")
figure_dir  <- paste0(sub_dir, "/figures/")
date    <- Sys.time() %>% as.character %>% sub(" .*$", "", .) %>% gsub("-", "_", .)
#If directories don't already exist, make them
for (filepath in list(version_dir, input_dir, output_dir, figure_dir)){
dir.create(filepath, recursive = T, showWarnings = F)
}
#Write initial log, with date stamp and version notes
log      <- paste0("Version: ", team, " v.", version, "\n\n", "Date: ", date, "\n\n", "Description: ", version_notes)
log_file <- file(paste0(version_dir, "v.", version, "_", date, ".txt"))
cat(log, file = log_file)
close(log_file)
close(log_file)
rm(list=ls())
library(data.table)
library(plyr)
library(ggplot2)
#source(functions.R)
###########################################
# Analytical steps for GBD 2017 education
###########################################
#
# Code is structured as follows:
#   1. General options
#   2. Version control and directory options
#   3. Analytical steps
#   4. Database formatting
#   5. Graphing tools
#
###########################################
#############
# 1. Options
#############
team          <- "GBD"              #Can be either "GBD", "Forecasting", or "Risk Factors"
debug         <- T                  #If True, then code will only be run for a single location, year, age, sex
new_version   <- F                  #Create a new version? If not specified, version below must be specified.
steps         <- c(1, 2, 3, etc)    #Which analytical steps to run. If blank, all steps are run.
if (new_version == F){
version     <- 1
}
#Initial notes detailing version's purpose
version_notes <- "Test run for new education code"
#########################################
# 2. Version control & directory options
#########################################
main_dir    <- "J:/WORK/01_covariates/02_inputs/education/update_2018/education_results/"
version_dir <- paste0(main_dir, "/version_history/", team, "/")
# If it's a new version of results, create the new version. Otherwise, overwrite a set of pre-existing results. User must manually input the version
if (new_version == T){
version <- list.files(version_dir) %>% max %>% +1
}
sub_dir     <- paste0(main_dir, team, "/v", version)
input_dir   <- paste0(sub_dir, "/inputs/")
output_dir  <- paste0(sub_dir, "/outputs/")
figure_dir  <- paste0(sub_dir, "/figures/")
date    <- Sys.time() %>% as.character %>% sub(" .*$", "", .) %>% gsub("-", "_", .)
#If directories don't already exist, make them
for (filepath in list(version_dir, input_dir, output_dir, figure_dir)){
dir.create(filepath, recursive = T, showWarnings = F)
}
#Write initial log, with date stamp and version notes
log      <- paste0("Version: ", team, " v", version, "\n\n", "Date: ", date, "\n\n", "Description: ", version_notes)
log_file <- file(paste0(version_dir, "v", version, "_", date, ".txt"))
cat(log, file = log_file)
close(log_file)
